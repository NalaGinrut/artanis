;;  -*-  indent-tabs-mode:nil; coding: utf-8 -*-
;;  === i18n tests ===
;;  Copyright (C) 2025
;;      "Mu Lei" known as "NalaGinrut" <NalaGinrut@gmail.com>
;;  Artanis is free software: you can redistribute it and/or modify
;;  it under the terms of the GNU General Public License and GNU
;;  Lesser General Public License published by the Free Software
;;  Foundation, either version 3 of the License, or (at your option)
;;  any later version.

;;  Artanis is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU General Public License and GNU Lesser General Public License
;;  for more details.

;;  You should have received a copy of the GNU General Public License
;;  and GNU Lesser General Public License along with this program.
;;  If not, see <http://www.gnu.org/licenses/>.

(define-module (test i18n)
  #:use-module (artanis utils)
  #:use-module (artanis artanis)
  #:use-module (artanis config)
  #:use-module (artanis cli)
  #:use-module (artanis i18n)
  #:use-module (artanis i18n json)
  #:use-module (artanis i18n sxml)
  #:use-module (artanis i18n locale)
  #:use-module (srfi srfi-19) ; for date manipulation
  #:use-module (srfi srfi-11) ; for let-values
  #:use-module (test-suite lib)
  #:use-module (test-suite helper))

(setlocale LC_ALL "ja_JP.UTF-8")

(define *virtual-time* 1735325608) ; mimic general timestamp in seconds
(define *virtual-date* (time-utc->date
                        (make-time time-utc 0 *virtual-time*)))

(define expect-result
  "{\"money\":\"JPY  15,000\",\"smoney\":\"￥15,000\",\"num\":\"15,000.00\",\"local-date\":\"2024年12月28日\",\"global-date\":\"2024年12月27日\",\"weekday\":\"金曜日\",\"month\":\"12月\"}")

(define url-mode-request
  "GET /index/ja_JP HTTP/1.1\r
\r
")

(define header-mode-request
  "GET /test/header HTTP/1.1\r
Accept-Language: ja-JP\r
\r
")

(define cookie-mode-request
  "GET /test/cookie HTTP/1.1\r
Cookie: lang=ja_JP\r
\r
")

(define jp-test-request
  "GET /str-test/ja_JP HTTP/1.1\r
\r
")

(define locale-test-request
  "GET /locale-test/pl_PL HTTP/1.1\r
\r
")

(define (handler rc)
  (let* ((_G (:i18n rc))
         (money (_G `(money 15000)))
         (smoney (_G `(moneysign 15000)))
         (num (_G `(number 15000 2)))
         (local-date (_G `(local-date ,*virtual-time*)))
         (global-date (_G `(global-date ,*virtual-time*)))
         (weekday (_G `(weekday ,(date-week-day *virtual-date*))))
         (month (_G `(month ,(date-month *virtual-date*)))))
    (:mime rc `(("money" . ,money)
                ("smoney" . ,smoney)
                ("num" . ,num)
                ("local-date" . ,local-date)
                ("global-date" . ,global-date)
                ("weekday" . ,weekday)
                ("month" . ,month)))))

(get "/index/:lang"
  #:i18n "lang" #:mime 'json
  handler)

(get "/test/header"
  #:i18n 'header #:mime 'json
  handler)

(get "/test/cookie"
  #:i18n '(cookie "lang") #:mime 'json
  handler)

(define *test-dir* "/tmp/i18n-test")
(define test-jp-translation/json
  (scm->json-string
   '(("Merry Christmas" . "メリークリスマス")
     ("Mr. Lawrence" . "ローレンスさん"))))

(define test-jp-translation/sxml
  '(("Merry Christmas" . "メリークリスマス")
    ("Mr. Lawrence" . "ローレンスさん")))

(define test-pl-translation
  "# Example PO file with Polish plural forms
msgid \"\"
msgstr \"\"
\"Project-Id-Version: Test 1.0\\n\"
\"Language: pl\\n\"
\"Content-Type: text/plain; charset=UTF-8\\n\"
\"Content-Transfer-Encoding: 8bit\\n\"
\"Plural-Forms: nplurals=3; plural=n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\\n\"

msgid \"You have %d apple.\"
msgid_plural \"You have %d apples.\"
msgstr[0] \"Masz %d jabko.\"
msgstr[1] \"Masz %d jabka.\"
msgstr[2] \"Masz %d jabek.\"
")

(define js-expect-result
  "メリークリスマス, ローレンスさん!")

(define (prepare-jp-json-test)
  (when (not (file-exists? *test-dir*))
    (mkdir *test-dir*))
  (let ((port (open-file (format #f "~a/~a" *test-dir* "ja_JP.json") "w")))
    (display test-jp-translation/json port)
    (close port))
  (conf-set! '(session i18n) 'json)
  (init-i18n))

(define (prepare-jp-sxml-test)
  (when (not (file-exists? *test-dir*))
    (mkdir *test-dir*))
  (let ((port (open-file (format #f "~a/~a" *test-dir* "ja_JP.scm") "w")))
    (write test-jp-translation/sxml port)
    (close port))
  (conf-set! '(session i18n) 'sxml)
  (init-i18n))

(define (prepare-pl-locale-test)
  (when (not (file-exists? *test-dir*))
    (mkdir *test-dir*))
  (cli-run* mkdir -p ,(format #f "~a/locale/pl_PL/LC_MESSAGES" *test-dir*))
  (let ((port (open-file (format #f "~a/pl.po" *test-dir*) "w")))
    (display test-pl-translation port)
    (close port)
    (cli-run* msgfmt ,(format #f "~a/pl.po" *test-dir*)
              -o ,(format #f "~a/locale/pl_PL/LC_MESSAGES/~a.mo"
                          *test-dir* (i18n-locale-domain)))
    (conf-set! '(session i18n) 'locale)
    (init-i18n)))

(get "/str-test/:lang"
  #:i18n "lang"
  (lambda (rc)
    (let ((_G (:i18n rc)))
      (format #f "~a, ~a!"
              (_G "Merry Christmas")
              (_G "Mr. Lawrence")))))

(define expect-locale-pl-result
  "{\"0\":\"Masz 0 jabek.\",\"1\":\"Masz 1 jabko.\",\"2\":\"Masz 2 jabka.\"}")

(get "/locale-test/:lang"
  #:i18n "lang" #:mime 'json
  (lambda (rc)
    (let ((_G (:i18n rc)))
      (:mime rc `(("0" . ,(format #f (_G "You have %d apple." "You have %d apples." 0) 0))
                  ("1" . ,(format #f (_G "You have %d apple." "You have %d apples." 1) 1))
                  ("2" . ,(format #f (_G "You have %d apple." "You have %d apples." 2) 2)))))))

(with-test-prefix "i18n test"

  (cli-run* rm -rf ,*test-dir*)

  (pass-if "i18n URL mode test"
    (let-values (((res body) (test-from-request url-mode-request)))
      (string=? (utf8->string body) expect-result)))

  (pass-if "i18n HEADER mode test"
    (let-values (((res body) (test-from-request header-mode-request)))
      (string=? (utf8->string body) expect-result)))

  (pass-if "i18n Cookie mode test"
    (let-values (((res body) (test-from-request cookie-mode-request)))
      (string=? (utf8->string body) expect-result)))

  (pass-if "i18n json translation test"
    (parameterize ((i18n-json-dir *test-dir*))
      (prepare-jp-json-test)
      (let-values (((res body) (test-from-request jp-test-request)))
        (string=? (utf8->string body) js-expect-result))))

  (pass-if "i18n sxml translation test"
    (parameterize ((i18n-sxml-dir *test-dir*))
      (prepare-jp-sxml-test)
      (let-values (((res body) (test-from-request jp-test-request)))
        (string=? (utf8->string body) js-expect-result))))

  (pass-if "i18n locale translation test"
    (let ((mo-dir (format #f "~a/locale" *test-dir*)))
      (parameterize ((i18n-locale-mo-dir mo-dir))
        (prepare-pl-locale-test)
        (let-values (((res body) (test-from-request locale-test-request)))
          (string=? (utf8->string body) expect-locale-pl-result)))))

  ;; TODO: fill other tests
  )
